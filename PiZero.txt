First Project for me. I could add photos.

Raspberry Pi Zero 2WH 
3 projects on the one device
Camera, Morse Code LED, ASCII LED Transmit.

1. Legacy RaspBi coding works the camera.
2. Python code flashes Morse code to the LED 
3. A Python program translates and transmits ASCII implementation on 8 LED's.

Python file then, (mostly written by MS Edge AI and ChatGPT on Chromium-Browser) - ASCII_3.py


import RPi.GPIO as GPIO
import time

# Define the GPIO pins for the eight LEDs (adjust these pins as needed)
led_pins = [5, 6, 13, 19, 26, 16, 20, 21]

# Function to set up GPIO
def setup_gpio():
    GPIO.setmode(GPIO.BCM)
    for pin in led_pins:
        GPIO.setup(pin, GPIO.OUT)
        GPIO.output(pin, GPIO.LOW)

# Function to transmit an ASCII code using the eight LEDs
def transmit_ascii_code(ascii_code):
    binary_code = format(ascii_code, '08b')  # Convert ASCII code to 8-bit binary
    for i, pin in enumerate(led_pins):
        if binary_code[i] == '1':
            GPIO.output(pin, GPIO.HIGH)
        else:
            GPIO.output(pin, GPIO.LOW)

# Function to transmit text from a file as ASCII codes
def transmit_text_from_file(file_path):
    setup_gpio()
    try:
        with open(file_path, 'r') as file:
            text = file.read()
            for char in text:
                ascii_code = ord(char)
                transmit_ascii_code(ascii_code)
                time.sleep(1)  # Delay for 1 second
                for pin in led_pins:
                    GPIO.output(pin, GPIO.LOW)
                time.sleep(.25)
    except KeyboardInterrupt:
        pass
    finally:
        GPIO.cleanup()

if __name__ == "__main__":
    file_path = "message.txt"  # Change this to the path of your text file
    transmit_text_from_file(file_path)



Second Program file then. Morse Code to one LED. - Morse_3.py

import RPi.GPIO as GPIO
import time

# Define the GPIO pin where the LED is connected
led_pin = 17

# Define the Morse Code dictionary
morse_code_dict = {
    'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.',
    'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---',
    'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---',
    'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-',
    'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--',
    'Z': '--..', '0': '-----', '1': '.----', '2': '..---', '3': '...--',
    '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..',
    '9': '----.', ' ': ' '
}

# Function to transmit a single Morse Code character
def transmit_character(char):
    if char == ' ':
        time.sleep(3)  # 3 units of time for word gap
    else:
        for symbol in morse_code_dict[char.upper()]:
            if symbol == '.':
                GPIO.output(led_pin, GPIO.HIGH)
                time.sleep(1)  # 1 unit of time for dot
                GPIO.output(led_pin, GPIO.LOW)
                time.sleep(1)  # 1 unit of time for gap between dots and dashes
            elif symbol == '-':
                GPIO.output(led_pin, GPIO.HIGH)
                time.sleep(3)  # 3 units of time for dash
                GPIO.output(led_pin, GPIO.LOW)
                time.sleep(1)  # 1 unit of time for gap between dots and dashes
    time.sleep(2)  # 2 units of time for gap between characters

# Function to transmit a Morse Code message
def transmit_message(message):
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(led_pin, GPIO.OUT)
    
    for char in message:
        transmit_character(char)

    GPIO.cleanup()

if __name__ == "__main__":
    message_to_transmit = "HELLO TO THE WHOLE WORLD"  # Change this to your desired message
    transmit_message(message_to_transmit)




